// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	da "github.com/celestiaorg/rollmint/da"
	log "github.com/celestiaorg/rollmint/log"

	mock "github.com/stretchr/testify/mock"

	store "github.com/celestiaorg/rollmint/store"

	types "github.com/celestiaorg/rollmint/types"
)

// DataAvailabilityLayerClient is an autogenerated mock type for the DataAvailabilityLayerClient type
type DataAvailabilityLayerClient struct {
	mock.Mock
}

// CheckBlockAvailability provides a mock function with given fields: dataLayerHeight
func (_m *DataAvailabilityLayerClient) CheckBlockAvailability(dataLayerHeight uint64) da.ResultCheckBlock {
	ret := _m.Called(dataLayerHeight)

	var r0 da.ResultCheckBlock
	if rf, ok := ret.Get(0).(func(uint64) da.ResultCheckBlock); ok {
		r0 = rf(dataLayerHeight)
	} else {
		r0 = ret.Get(0).(da.ResultCheckBlock)
	}

	return r0
}

// Init provides a mock function with given fields: namespaceID, config, kvStore, logger
func (_m *DataAvailabilityLayerClient) Init(namespaceID types.NamespaceID, config []byte, kvStore store.KVStore, logger log.Logger) error {
	ret := _m.Called(namespaceID, config, kvStore, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.NamespaceID, []byte, store.KVStore, log.Logger) error); ok {
		r0 = rf(namespaceID, config, kvStore, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *DataAvailabilityLayerClient) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *DataAvailabilityLayerClient) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitBlock provides a mock function with given fields: block
func (_m *DataAvailabilityLayerClient) SubmitBlock(block *types.Block) da.ResultSubmitBlock {
	ret := _m.Called(block)

	var r0 da.ResultSubmitBlock
	if rf, ok := ret.Get(0).(func(*types.Block) da.ResultSubmitBlock); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Get(0).(da.ResultSubmitBlock)
	}

	return r0
}

type mockConstructorTestingTNewDataAvailabilityLayerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataAvailabilityLayerClient creates a new instance of DataAvailabilityLayerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataAvailabilityLayerClient(t mockConstructorTestingTNewDataAvailabilityLayerClient) *DataAvailabilityLayerClient {
	mock := &DataAvailabilityLayerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
