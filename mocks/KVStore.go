// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	store "github.com/celestiaorg/rollmint/store"
	mock "github.com/stretchr/testify/mock"
)

// KVStore is an autogenerated mock type for the KVStore type
type KVStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *KVStore) Delete(key []byte) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *KVStore) Get(key []byte) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBatch provides a mock function with given fields:
func (_m *KVStore) NewBatch() store.Batch {
	ret := _m.Called()

	var r0 store.Batch
	if rf, ok := ret.Get(0).(func() store.Batch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Batch)
		}
	}

	return r0
}

// PrefixIterator provides a mock function with given fields: prefix
func (_m *KVStore) PrefixIterator(prefix []byte) store.Iterator {
	ret := _m.Called(prefix)

	var r0 store.Iterator
	if rf, ok := ret.Get(0).(func([]byte) store.Iterator); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Iterator)
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, value
func (_m *KVStore) Set(key []byte, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKVStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewKVStore creates a new instance of KVStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKVStore(t mockConstructorTestingTNewKVStore) *KVStore {
	mock := &KVStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
