// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/tendermint/tendermint/abci/types"
)

// Evidence is an autogenerated mock type for the Evidence type
type Evidence struct {
	mock.Mock
}

// ABCI provides a mock function with given fields:
func (_m *Evidence) ABCI() []types.Evidence {
	ret := _m.Called()

	var r0 []types.Evidence
	if rf, ok := ret.Get(0).(func() []types.Evidence); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Evidence)
		}
	}

	return r0
}

// Bytes provides a mock function with given fields:
func (_m *Evidence) Bytes() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *Evidence) Hash() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Height provides a mock function with given fields:
func (_m *Evidence) Height() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Evidence) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Time provides a mock function with given fields:
func (_m *Evidence) Time() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ValidateBasic provides a mock function with given fields:
func (_m *Evidence) ValidateBasic() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEvidence interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvidence creates a new instance of Evidence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvidence(t mockConstructorTestingTNewEvidence) *Evidence {
	mock := &Evidence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
