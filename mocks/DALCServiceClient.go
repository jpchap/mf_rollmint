// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dalc "github.com/celestiaorg/rollmint/types/pb/dalc"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// DALCServiceClient is an autogenerated mock type for the DALCServiceClient type
type DALCServiceClient struct {
	mock.Mock
}

// CheckBlockAvailability provides a mock function with given fields: ctx, in, opts
func (_m *DALCServiceClient) CheckBlockAvailability(ctx context.Context, in *dalc.CheckBlockAvailabilityRequest, opts ...grpc.CallOption) (*dalc.CheckBlockAvailabilityResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dalc.CheckBlockAvailabilityResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dalc.CheckBlockAvailabilityRequest, ...grpc.CallOption) *dalc.CheckBlockAvailabilityResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dalc.CheckBlockAvailabilityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dalc.CheckBlockAvailabilityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveBlocks provides a mock function with given fields: ctx, in, opts
func (_m *DALCServiceClient) RetrieveBlocks(ctx context.Context, in *dalc.RetrieveBlocksRequest, opts ...grpc.CallOption) (*dalc.RetrieveBlocksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dalc.RetrieveBlocksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dalc.RetrieveBlocksRequest, ...grpc.CallOption) *dalc.RetrieveBlocksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dalc.RetrieveBlocksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dalc.RetrieveBlocksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitBlock provides a mock function with given fields: ctx, in, opts
func (_m *DALCServiceClient) SubmitBlock(ctx context.Context, in *dalc.SubmitBlockRequest, opts ...grpc.CallOption) (*dalc.SubmitBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dalc.SubmitBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dalc.SubmitBlockRequest, ...grpc.CallOption) *dalc.SubmitBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dalc.SubmitBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dalc.SubmitBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDALCServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDALCServiceClient creates a new instance of DALCServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDALCServiceClient(t mockConstructorTestingTNewDALCServiceClient) *DALCServiceClient {
	mock := &DALCServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
